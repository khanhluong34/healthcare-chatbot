ABAP  is a high-level programming language created by the German software company SAP SE. It is currently positioned, alongside Java, as the language for programming the SAP NetWeaver Application Server, which is part of the SAP NetWeaver platform for building business applications.ABAP is one of the many application-specific fourth-generation languages  first developed in the 1980s. It was originally the report language for SAP R/2, a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting.ABAP used to be an abbreviation of Allgemeiner Berichts-Aufbereitungs-Prozessor, German for "generic report preparation processor", but was later renamed to the English Advanced Business Application Programming. ABAP was one of the first languages to include the concept of Logical Databases , which provides a high level of abstraction from the basic database level,which supports every platform, language and units.The ABAP language was originally used by developers to develop the SAP R/3 platform. It was also intended to be used by SAP customers to enhance SAP applications – customers can develop custom reports and interfaces with ABAP programming. The language was geared towards more technical customers with programming experience.ABAP remains as the language for creating programs for the client–server R/3 system, which SAP first released in 1992. As computer hardware evolved through the 1990s, more and more of SAP's applications and systems were written in ABAP. By 2001, all but the most basic functions were written in ABAP. In 1999, SAP released an object-oriented extension to ABAP called ABAP Objects, along with R/3 release 4.6.SAP's current development platform NetWeaver supports both ABAP and Java.ABAP has an abstraction between the business applications, the operating system and database. This ensures that applications do not depend directly upon a specific server or database platform and can easily be ported from one platform to another.SAP Netweaver currently runs on UNIX , Microsoft Windows, i5/OS on IBM System i , and z/OS on IBM System z . Supported databases are HANA, SAP ASE , IBM Db2, Informix, MaxDB, Oracle, and Microsoft SQL Server .All ABAP programs reside inside the SAP database. They are not stored in separate external files like Java or C++ programs. In the database all ABAP code exists in two forms: source code, which can be viewed and edited with the ABAP Workbench tools; and generated code, a binary representation somewhat comparable with Java bytecode. ABAP programs execute under the control of the runtime system, which is part of the SAP kernel. The runtime system is responsible for processing ABAP statements, controlling the flow logic of screens and responding to events ; in this respect it can be seen as a Virtual Machine comparable with the Java VM. A key component of the ABAP runtime system is the Database Interface, which turns database-independent ABAP statements  into statements understood by the underlying DBMS . The database interface handles all the communication with the relational database on behalf of ABAP programs; It also contains extra features such as buffering of tables and frequently accessed data in the local memory of the application server.All SAP data exists and all SAP software runs in the context of a SAP system. A system consists of a central relational database and one or more application servers  accessing the data and programs in this database. A SAP system contains at least one instance but may contain more, mostly for reasons of sizing and performance. In a system with multiple instances, load balancing mechanisms ensure that the load is spread evenly over the available application servers.Installations of the Web Application Server  typically consist of three systems: one for development; one for testing and quality assurance; and one for production. The landscape may contain more systems  or it may contain fewer ; nevertheless three is the most common configuration. ABAP programs are created and undergo first testing in the development system. Afterwards they are distributed to the other systems in the landscape. These actions take place under control of the Change and Transport System , which is responsible for concurrency control , version management, and deployment of programs on the QA and production systems.The Web Application Server consists of three layers: the database layer; the application layer; and the presentation layer. These layers may run on the same or on different physical machines. The database layer contains the relational database and the database software. The application layer knowledge contains the instance or instances of the system. All application processes, including the business transactions and the ABAP development, run on the application layer. The presentation layer handles the interaction with users of the system. Online access to ABAP application servers can go via a proprietary graphical interface, which is called "SAP GUI", or via a Web browser.ABAP software is deployed in software components.
Examples for these are:A transaction in SAP terminology is the execution of a program. The normal way of executing ABAP code in the SAP system is by entering a transaction code . Transactions can be called via system-defined or user-specific, role-based menus. They can also be started by entering the transaction code directly into a command field, which is present in every SAP screen. Transactions can also be invoked programmatically by means of the ABAP statements CALL TRANSACTION and LEAVE TO TRANSACTION.
The general notion of a transaction is called a Logical Unit of Work  in SAP terminology; the short form of transaction code is T-code.As in other programming languages, an ABAP program is either an executable unit or a library, which provides reusable code to other programs and is not independently executable.ABAP distinguishes two types of executable programs:Reports follow a relatively simple programming model whereby a user optionally enters a set of parameters  and the program then uses the input parameters to produce a report in the form of an interactive list. The term "report" can be somewhat misleading in that reports can also be designed to modify data; the reason why these programs are called reports is the "list-oriented" nature of the output they produce.Module pools define more complex patterns of user interaction using a collection of screens. The term “screen” refers to the actual, physical image that the user sees. Each screen also has a "flow logic", which refers to the ABAP code implicitly invoked by the screens, which is divided into a "PBO"  and "PAI"  section. In SAP documentation the term “dynpro”  refers to the combination of the screen and its flow logic.The non-executable program types are:ABAP programs are composed of individual sentences . The first word in a statement is called an ABAP keyword. Each statement ends with a period. Words must always be separated by at least one space. Statements can be indented as you wish. With keywords, additions and operands, the ABAP runtime system does not differentiate between upper and lowercase.Statements can extend beyond one line. You can have several statements in a single line . Lines that begin with asterisk * in the first column are recognized as comment lines by the ABAP runtime system and are ignored. Double quotations marks  indicate that the remainder of a line is a comment.There are two possible ways to develop in ABAP. The availability depends on the release of the ABAP system.The ABAP Workbench is part of the ABAP system and is accessed via SAP GUI. It contains different tools for editing programs. The most important of these are :The Object Navigator  provides a single integrated interface into these various tools.The ABAP Development Tools , formally known as "ABAP in Eclipse", is a set of plugins for the Eclipse platform to develop ABAP.In this scenario, the ABAP developer installs the required tools on his computer and works locally, whereas a continuous synchronization with the backend is performed.The ABAP Dictionary contains all metadata about the data in the SAP system. It is closely linked with the ABAP Workbench in that any reference to data  will be obtained from the dictionary. Developers use the ABAP Dictionary transactions  to display and maintain this metadata.When a dictionary object is changed, a program that references the changed object will automatically reference the new version the next time the program runs. Because ABAP is interpreted, it is not necessary to recompile programs that reference changed dictionary objects.A brief description of the most important types of dictionary objects follows:This brief description of the ABAP syntax begins with the ubiquitous "Hello world" program.This example contains two statements: REPORT and WRITE. The program displays a list on the screen. In this case, the list consists of the single line "Hello World". The REPORT statement indicates that this program is a report. This program could be a module pool after replacing the REPORT statement with PROGRAM.Consecutive statements with an identical first  part can be combined into a "chained" statement using the chain operator :. The common part of the statements is written to the left of the colon, the differing parts are written to the right of the colon and separated by commas. The colon operator is attached directly to the preceding token, without a space .Chaining is often used in WRITE statements. WRITE accepts just one argument, so if for instance you wanted to display three fields from a structure called FLIGHTINFO, you would have to code:Chaining the statements results in a more readable and more intuitive form:In a chain statement, the first part  is not limited to the statement name alone. The entire common part of the consecutive statements can be placed before the colon. Example:could be rewritten in chained form as:ABAP has 2 ways of defining text as a comment:Example:Code in ABAP is whitespace-sensitive.assigns to variable x the substring of the variable a, starting from b with the length defined by the variable c.assigns to variable x the sum of the variable a and the result of the call to method b with the parameter c.In contrast with languages like C/C++ or Java, which define a limited set of language-specific statements and provide most functionality via libraries, ABAP contains an extensive amount of built-in statements. These statements traditionally used sentence-like structures and avoided symbols, making ABAP programs relatively verbose. However, in more recent versions of the ABAP language, a terser style is possible.An example of statement based syntax  versus expression-based syntax :ABAP provides a set of built-in data types. In addition, every structure, table, view or data element defined in the ABAP Dictionary can be used to type a variable. Also, object classes and interfaces can be used as types.The built-in data types are:Date variables or constants  contain the number of days since January 1, 1 AD. Time variables or constants  contain the number of seconds since midnight. A special characteristic of both types is that they can be accessed both as integers and as character strings , which can be used for date and time handling. For example, the code snippet below calculates the last day of the previous month :All ABAP variables have to be explicitly declared in order to be used. They can be declared either with individual statements and explicit typing or, since ABAP 7.40, inline with inferred typing.Normally all declarations are placed at the top of the code module  before the first executable statement; this placement is a convention and not an enforced syntax rule.  The declaration consists of the name, type, length , additional modifiers  and optionally an initial value:Notice the use of the colon to chain together consecutive DATA statements.Since ABAP 7.40, variables can be declared inline with the following syntax:For this type of declaration it must be possible to infer the type statically, e.g. by method signature or database table structure.This syntax is also possible in OpenSQL statements:The ABAP language supports object-oriented programming, through a feature known as "ABAP Objects". This helps to simplify applications and make them more controllable.ABAP Objects is fully compatible with the existing language, so one can use existing statements and modularization units in programs that use ABAP Objects, and can also use ABAP Objects in existing ABAP programs.  Syntax checking is stronger in ABAP Objects programs, and some syntactical forms  of certain statements are not permitted.Objects form a capsule which combines the character to the respective behavior. Objects should enable programmers to map a real problem and its proposed software solution on a one-to-one basis. Typical objects in a business environment are, for example, ‘Customer’, ‘Order’, or ‘Invoice’. From Release 3.1 onwards, the Business Object Repository  of SAP Web Application Server ABAP has contained examples of such objects. The BOR object model will be integrated into ABAP Objects in the next Release by migrating the BOR object types to the ABAP class library.
A comprehensive introduction to object orientation as a whole would go far beyond the limits of this introduction to ABAP Objects. This documentation introduces a selection of terms that are used universally in object orientation and also occur in ABAP Objects. In subsequent sections, it goes on to discuss in more detail how these terms are used in ABAP Objects. The end of this section contains a list of further reading, with a selection of titles about object orientation.In object-oriented programming, objects usually have the following properties:The ABAP Core Data Services  are the implementation of the general CDS concept for AS ABAP. ABAP CDS makes it possible to define semantic data models on the central database of the application server. On AS ABAP, these models can be defined independently of the database system. The entities of these models provide enhanced access functions when compared with existing database tables and views defined in ABAP Dictionary, making it possible to optimize Open SQL-based applications. This is particularly clear when an AS ABAP uses a SAP HANA database, since its in-memory characteristics can be implemented in an optimum manner.The data models are defined using the data definition language  and data control language  provided in the ABAP CDS in the ABAP CDS syntax. The objects defined using these languages are integrated into ABAP Dictionary and managed here too.CDS source code can only be programmed in the Eclipse-based ABAP Development Tools . The Data Definition Language  and the Data Control Language  use different editors.Internal tables are an important feature of the ABAP language. An internal table is defined similarly to a vector of structs in C++ or a vector of objects in Java. The main difference with these languages is that ABAP provides a collection of statements to easily access and manipulate the contents of internal tables. Note that ABAP does not support arrays; the only way to define a multi-element data object is to use an internal table.Internal tables are a way to store variable data sets of a fixed structure in the working memory of ABAP, and provides the functionality of dynamic arrays. The data is stored on a row-by-row basis, where each row has the same structure.Internal tables are preferably used to store and format the content of database tables from within a program. Furthermore, internal tables in connection with structures are an important means of defining complex data structures in an ABAP program.The following example defines an internal table with two fields with the format of database table VBRK.The following list only gives a rough overview about some important milestones in the history of the language ABAP. For more details, see ABAP - Release-Specific Changes.