Nim is a general-purpose, multi-paradigm, statically typed, compiled high-level systems programming language, designed and developed by a team around Andreas Rumpf. Nim is designed to be "efficient, expressive, and elegant", supporting metaprogramming, functional, message passing, procedural, and object-oriented programming styles by providing several features such as compile time code generation, algebraic data types, a foreign function interface  with C, C++, Objective-C, and JavaScript, and supporting compiling to those same languages as intermediate representations.Nim was created to be a language as fast as C, as expressive as Python, and as extensible as Lisp.Nim is statically typed. It supports compile-time metaprogramming features such as syntactic macros and term rewriting macros. Term rewriting macros enable library implementations of common data structures, such as bignums and matrices, to be implemented efficiently, as if they were built-in language facilities. Iterators are supported and can be used as first class entities, as can functions, allowing for the use of functional programming methods. Object-oriented programming is supported by inheritance and multiple dispatch. Functions can be generic, they can be overloaded, and generics are further enhanced by Nim's support for type classes. Operator overloading is also supported. Nim includes tunable automatic garbage collection based on deferred reference counting with cycle detection, which can also be turned off altogether. ... presents a most original design that straddles Pascal and Python and compiles to C code or JavaScript.As of October 2021, Nim compiles to C, C++, JavaScript, and Objective-C.Nim's initial development was started in 2005 by Andreas Rumpf. It was originally named Nimrod when the project was made public in 2008.: 4–11  The first version of the Nim compiler was written in Pascal using the Free Pascal compiler. In 2008, a version of the compiler written in Nim was released. The compiler is free and open-source software, and is being developed by a community of volunteers working with Andreas Rumpf. The language was officially renamed from Nimrod to Nim with the release of version 0.10.2 in December 2014. On September 23, 2019, version 1.0.0 of Nim was released, signifying the maturing of the language and its toolchain.The syntax of Nim resembles that of Python. Code blocks and nesting statements are identified through use of whitespace, according to the offside-rule. Many keywords are identical to their Python equivalents, which are mostly English keywords, whereas other programming languages usually use punctuation. With the goal of improving upon its influence languages, even though Nim supports indentation-based syntax like Python, it introduced additional flexibility. For example, a single statement may span multiple lines if a comma or binary operator is at the end of each line. And Nim supports user-defined operators.Unlike Python, Nim implements  static typing. Nim's type system allows for easy type conversion, casting, and provides syntax for generic programming. Nim notably provides type classes which can stand in for multiple types, and provides several such type classes 'out of the box'. Type classes allow working with several types as if they were a single type. For example:This code sample demonstrates the use of typeclasses in NimNim is almost fully style-insensitive; two identifiers are considered equal if they only differ by capitalization and underscores, as long as the first characters are identical. Historically, Nim was fully case-insensitive  and underscores were completely ignored, too.Nim was influenced by specific characteristics of existing languages, including the following:Nim supports Uniform Function Call Syntax  and identifier equality, which provides a large degree of flexibility in use.For example, each of these lines print "hello world", just with different syntax:Except for the first letter, identifiers in Nim are compared in a case-insensitive manner, and underscores are ignored.Example:The stropping feature allows the use of any name for variables or functions, even when the names are reserved words for keywords. An example of stropping is the ability to define a variable named if, without clashing with the keyword if. Nim's implementation of this is achieved via backticks, allowing any reserved word to be used as an identifier.The Nim compiler emits fast, optimized C code by default. It defers compiling-to-object code to an external C compiler to leverage existing compiler optimization and portability. Many C compilers are supported, including Clang, Microsoft Visual C++ , MinGW, and GNU Compiler Collection . The Nim compiler can also emit C++, Objective-C, and JavaScript code to allow easy interfacing with application programming interfaces  written in those languages; developers can simply write in Nim, then compile to any supported language. This also allows writing applications for iOS and Android. There is also an unofficial LLVM backend, allowing use of the Nim compiler in a stand-alone way.The Nim compiler is self-hosting, meaning it is written in the Nim language. The compiler supports cross-compiling, so it is able to compile software for any of the supported operating systems, no matter the development machine. This is useful for compiling applications for embedded systems, and for uncommon and obscure computer architectures.By default, the Nim compiler creates a debug build. 
With the option -d:release a release build can be created, which is optimized for speed and contains fewer runtime checks. 
With the option -d:danger all runtime checks can be disabled, if maximum speed is desired.Nim supports multiple memory management strategies, including the following:Many tools are bundled with the Nim install package, including:Nimble is the standard package manager used by Nim to package Nim modules. It was initially developed by Dominik Picheta, who is also a core Nim developer. Nimble has been included as Nim's official package manager since Oct 27, 2015, the v0.12.0 release.Nimble packages are defined by .nimble files, which contain information about the package version, author, license, description, dependencies, and more.: 132  These files support a limited subset of the Nim syntax called NimScript, with the main limitation being the access to the FFI. These scripts allow changing of test procedure, or for custom tasks to be written.The list of packages is stored in a JavaScript Object Notation  file which is freely accessible in the nim-lang/packages repository on GitHub. This JSON file provides Nimble with a mapping between the names of packages and their Git or Mercurial repository URLs.Nimble comes with the Nim compiler. Thus, it is possible to test the Nimble environment by running:
nimble -v.
This command will reveal the version number, compiling date and time, and Git hash of nimble. Nimble uses the Git package, which must be available for Nimble to function properly. The Nimble command-line is used as an interface for installing, removing , and upgrading–patching module packages.: 130–131c2nim is a source-to-source compiler  meant to be used on C/C++ headers to help generate new Nim bindings. The output is human-readable Nim code that is meant to be edited by hand after the translation process.koch is a maintenance script that is used to build Nim, and provide HTML documentation.nimgrep is a generic tool for manipulating text. It is used to search for regex, peg patterns, and contents of directories, and it can be used to replace tasks. It is included to assist with searching Nim's style-insensitive identifiers.nimsuggest is a tool that helps any source code editor query a .nim source file to obtain useful information like definition of symbols or suggestions for completions.niminst is a tool to generate an installer for a Nim program. 
It creates .msi installers for Windows via Inno Setup, and install and uninstall scripts for Linux, macOS, and Berkeley Software Distribution .nimpretty is a source code beautifier, used to format code according to the official Nim style guide.Testament is an advanced automatic Unittests runner for Nim tests. Used in developing Nim, it offers process isolation tests, generates statistics about test cases, supports multiple targets and simulated Dry-Runs, has logging, can generate HTML reports, can skip tests from a file, and more.Some notable tools not included in the Nim package include:choosenim was developed by Dominik Picheta, creator of the Nimble package manager, as a tool to enable installing and using multiple versions of the Nim compiler. It downloads any Nim stable or development compiler version from the command line, enabling easy switching between them.nimpy is a library that enables convenient Python integration in Nim programs.nimterop is a tool focused on automating the creation of C/C++ wrappers needed for Nim's foreign function interface.Pure libraries are modules written in Nim only. They include no wrappers to access libraries written in other programming languages.Impure libraries are modules of Nim code which depend on external libraries that are written in other programming languages such as C.The Nim standard library includes modules for all basic tasks, including:A Nim program can use any library which can be used in a C, C++, or JavaScript program. Language bindings exist for many libraries, including GTK, Qt QML, wxWidgets, Simple DirectMedia Layer  2, Cairo, OpenGL, Windows API , zlib, libzip, OpenSSL, Vulkan and cURL. Nim works with PostgreSQL, MySQL, and SQLite databases. Nim can interface with the Lua, Julia, Rust,
C#,
TypeScript,
and Python programming languages.The "Hello, World!" program in Nim:Another version of making a "Hello World" is...Program to calculate the factorial of a positive integer using the iterative approach:Using the module math  from Nim's standard library:A simple demonstration showing many of Nim's features.One of the more exotic features is the implicit result variable. Every procedure in Nim with a non-void return type has an implicit result variable that represents the value to be returned. In the for loop we see an invocation of countdown which is an iterator. If an iterator is omitted, the compiler will attempt to use an items iterator, if one is defined for the type specified.Using GTK3 with gobject introspection through the gintro module:This code requires the gintro module to work, which is not part of the standard library. To install the module gintro and many others you can use the tool nimble, which comes as part of nim. To install the gintro module with nimble you do the following:Functional programming is supported in Nim through first-class functions and code without side effects via the `noSideEffect` pragma, the `func` keyword and the experimental feature `strictFuncs`.With the `strictFuncs` feature enabled, Nim will perform side effect analysis and raise compilation errors for code that does not obey the contract of producing no side effects.Contrary to purely functional programming languages, Nim is a multi-paradigm programming language, so functional programming restrictions are opt-in on a function-by-function basis.Nim supports first-class functions by allowing functions to be stored in variables or passed as parameters to be invoked by other functions.For example:Produces the output:The func keyword introduces a shortcut for a noSideEffect pragma.Is short for:Since version 1.4, a stricter definition of a "side effect" is available. In addition to the existing rule that a side effect is calling a function with side effects the following rule is also enforced:Any mutation to an object does count as a side effect if that object is reachable via a parameter that is not declared as a var parameter.For example:This is an example of metaprogramming in Nim using its template facilities.The genType is invoked at compile-time and a Test type is created.Nim supports both constrained and unconstrained generic programming.
Generics may be used in procedures, templates and macros. They are defined after the proc's name in square brackets, as seen below.In addThese, T is the generic type, the compiler will accept any values for this function as long as both parameters and the return value are of the same type.One can further clarify which types the procedure will accept by specifying a type class.addTheseNumberswill then only work for types contained in the SomeNumbersum type.Macros can rewrite parts of the code at compile-time. Nim macros are powerful and can do many operations on the abstract syntax tree.Here's a simple example, that creates a macro called twice:The twice macro in this example takes the echo statement in the form of an abstract syntax tree as input. In this example we decided to return this syntax tree without any manipulations applied to it. But we do it twice, hence the name of the macro. The result is that the code gets rewritten by the macro to look like the following code at compile time:Nim's FFI is used to call functions written in the other programming languages that it can compile to. This means that libraries written in C, C++, Objective-C, and JavaScript can be used in the Nim source code. One should be aware that both JavaScript and C, C++, or Objective-C libraries cannot be combined in the same program, as they are not as compatible with JavaScript as they are with each other. Both C++ and Objective-C are based on and compatible with C, but JavaScript is incompatible, as a dynamic, client-side web-based language.: 226The following program shows the ease with which external C code can be used directly in Nim.In this code the printf function is imported into Nim and then used.Basic example using 'console.log' directly for the JavaScript compilation target:The JavaScript code produced by the Nim compiler can be executed with Node.js or a web browser.To activate threading support in Nim, a program should be compiled with --threads:on command line argument. Each thread has a separate garbage collected heap and sharing of memory is restricted, which helps with efficiency and stops race conditions by the threads.Nim also has a channels module that simplifies passing data between threads.Nim supports asynchronous IO via the asyncdispatch module, which adds async/await syntax via the macro system. An example of an asynchronous http server:Nim has an active community on the self-hosted, self-developed official forum. Further, the project uses a Git repository, bug tracker, and wiki hosted by GitHub, where the community engages with the language.The first Nim conference, NimConf, took place on June 20, 2020. It was held digitally due to COVID-19, with an open call for contributor talks in the form of YouTube videos. The conference began with language overviews by Nim developers Andreas Rumpf and Dominik Picheta. Presentation topics included talks about Nim web frameworks, mobile development, Internet of things  devices, and game development, including a talk about writing Nim for Game Boy Advance. NimConf 2020 is available as a YouTube playlist.In addition to official conferences, Nim has been featured at various other conventions. A presentation on Nim was given at the O'Reilly Open Source Convention  in 2015. Four speakers represented Nim at Free and Open source Software Developers' European Meeting  2020, including the creator of the language, Andreas Rumpf.